#pragma checksum "C:\Users\admin\Desktop\Easy CSIT\Views\Course\DBMS.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cafd02b563a5cf12f634ccc33a16a55c91d80946"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Course_DBMS), @"mvc.1.0.view", @"/Views/Course/DBMS.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\admin\Desktop\Easy CSIT\Views\_ViewImports.cshtml"
using EasyCSIT;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\admin\Desktop\Easy CSIT\Views\_ViewImports.cshtml"
using EasyCSIT.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cafd02b563a5cf12f634ccc33a16a55c91d80946", @"/Views/Course/DBMS.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c841dc2f78dc3024c0f2f0360efb9bebdc1dbcee", @"/Views/_ViewImports.cshtml")]
    public class Views_Course_DBMS : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<div class=""terms"">
    

        <p>This page contains Syllabus of Database Management System of CSIT. </p>

        <div class=""row no-gutters"">

        </div>


        <div class=""card col-xl-6 col-lg-6 col-md-6 col-sm-12"">


            <div class=""card-body p-0"">
                <table class=""table table-sm"">

                    <tbody>
                        <tr>
                            <td>Title</td>

                            <td>
                                Database Management System
                            </td>
                        </tr>
                        <tr>
                            <td>Course code</td>

                            <td>CSC260</td>
                        </tr>
                        <tr>
                            <td>Nature of course</td>

                            <td>Theory + Lab</td>
                        </tr>
                        <tr>
                            <td>Semester</td>

                  ");
            WriteLiteral(@"          <td>fourth-semester</td>
                        </tr>
                        <tr>
                            <td>Full marks</td>

                            <td>60 + 20 + 20</td>
                        </tr>
                        <tr>
                            <td>Pass marks</td>

                            <td>24 + 8 + 8</td>
                        </tr>
                        <tr>
                            <td>Credit Hrs</td>

                            <td>3</td>
                        </tr>
                        <tr>
                            <td>Elective/Compulsary</td>

                            <td>Compulsary</td>

                        </tr>

                    </tbody>
                </table>
            </div>

        </div>



        <div class=""row"">
            <div class=""col"">
                <div class=""card"">
                    <div class=""card-header"">
                        <h3 class=""card-title"">
                 ");
            WriteLiteral(@"           <i class=""fas fa-book""></i>
                            Course Description
                        </h3>
                        <div class=""card-tools"">
                            <button type=""button"" class=""btn btn-tool"" data-card-widget=""collapse"">
                                <i class=""fas fa-minus""></i>
                            </button>
                            <button type=""button"" class=""btn btn-tool"" data-card-widget=""maximize"">
                                <i class=""fas fa-expand""></i>
                            </button>
                        </div>
                    </div>
                    <!-- /.card-header -->
                    <div class=""card-body"">
                        <p><b>Course Description:</b> The course covers the basic concepts of databases, database system</p><p>concepts and architecture, data modeling using ER diagram, relational model, SQL, relational</p><p>algebra and calculus, normalization, transaction processing, concurrency co");
            WriteLiteral(@"ntrol, and</p><p>database recovery.</p><p><br></p><p><b>Course Objective:</b> The main objective of this course is to introduce the basic concepts of</p><p>database, data modeling techniques using entity relationship diagram, relational algebra and</p><p>calculus, basic and advanced features SQL, normalization, transaction processing,</p><p>concurrency control, and recovery techniques.</p><div><br></div>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
            <!-- ./col -->

        </div>

        <div class=""row"">
            <div class=""col"">
                <div class=""card"">
                    <div class=""card-header"">
                        <h3 class=""card-title"">
                            <i class=""fas fa-file""></i>
                            Units and Unit Content
                        </h3>
                        <div class=""card-tools"">
                            <button type");
            WriteLiteral(@"=""button"" class=""btn btn-tool"" data-card-widget=""collapse"">
                                <i class=""fas fa-minus""></i>
                            </button>
                            <button type=""button"" class=""btn btn-tool"" data-card-widget=""maximize"">
                                <i class=""fas fa-expand""></i>
                            </button>
                        </div>
                    </div>
                    <!-- /.card-header -->
                    <div class=""card-body"">
                        <dl>

                            <dt>
                                1.
                                Database and Database Users
                            </dt>
                            <dt>teaching hours: 2 hrs</dt>
                            <dd><p>Introduction; Characteristics of the Database Approach; Actors on the Scene; Workers behind</p><p>the Scene; Advantages of Using the DBMS Approach</p><div><br></div></dd>

                            <dt>
         ");
            WriteLiteral(@"                       2.
                                Database System â€“ Concepts and Architecture
                            </dt>
                            <dt>teaching hours: 3 hrs</dt>
                            <dd><p>Data Models, Schemas, and Instances; Three-Schema Architecture and Data Independence;</p><p>Database Languages and Interfaces; the Database System Environment; Centralized and</p><p>Client/Server Architectures for DBMSs; Classification of Database Management Systems</p><div><br></div></dd>

                            <dt>
                                3.
                                Data Modeling Using the Entity-Relational Model
                            </dt>
                            <dt>teaching hours: 6 hrs</dt>
                            <dd><p>Using High-Level Conceptual Data Models for Database Design; Entity Types, Entity Sets,</p><p>Attributes, and Keys; Relationship Types, Relationship Sets, Roles, and Structural Constraints;</p><p>Weak Entity Types; ");
            WriteLiteral(@"ER Diagrams, Naming Conventions, and Design Issues; Relationship Types</p><p>of Degree Higher Than Two; Subclasses, Superclasses, and Inheritance; Specialization and</p><p>Generalization; Constraints and Characteristics of Specialization and Generalization</p><div><br></div></dd>

                            <dt>
                                4.
                                The Relational Data Model and Relational Database
                            </dt>
                            <dt>teaching hours: 3 hrs</dt>
                            <dd><p>Relational Model Concepts; Relational Model Constraints and Relational Database Schemas;</p><p>Update Operations, Transactions, and Dealing with Constraint Violations</p><div><br></div></dd>

                            <dt>
                                5.
                                The Relational Algebra and Relational Calculus
                            </dt>
                            <dt>teaching hours: 5 hrs</dt>
                  ");
            WriteLiteral(@"          <dd><p>Unary Relational Operations: SELECT and PROJECT; Relational Algebra Operations from Set</p><p>Theory; Binary Relational Operations: JOIN and DIVISION; Additional Relational Operations;</p><p>the Tuple Relational Calculus; the Domain Relational Calculus</p><div><br></div></dd>

                            <dt>
                                6.
                                SQL
                            </dt>
                            <dt>teaching hours: 8 hrs</dt>
                            <dd><p>Data Definition and Data Types; Specifying Constraints; Basic Retrieval Queries; Complex</p><p>Retrieval Queries; INSERT, DELETE, and UPDATE Statements; Views</p><div><br></div></dd>

                            <dt>
                                7.
                                Relational Database Design
                            </dt>
                            <dt>teaching hours: 7 hrs</dt>
                            <dd><p>Relational Database Design Using ER-to-Relat");
            WriteLiteral(@"ional Mapping; Informal Design Guidelines for</p><p>Relational Schemas; Functional Dependencies; Normal Forms Based on Primary Keys; General</p><p>Definitions of Second and Third Normal Forms; Boyce-Codd Normal Form; Multivalued</p><p>Dependency and Fourth Normal Form; Properties of Relational Decomposition</p><div><br></div></dd>

                            <dt>
                                8.
                                Introduction to Transaction Processing Concepts an
                            </dt>
                            <dt>teaching hours: 4 hrs</dt>
                            <dd><p>Introduction to Transaction Processing; Transaction and System Concepts; Desirable Properties</p><p>of Transactions; Characterizing Schedules Based on Recoverability; Characterizing Schedules</p><p>Based on Serializability</p><div><br></div></dd>

                            <dt>
                                9.
                                Concurrency Control Techniques
                    ");
            WriteLiteral(@"        </dt>
                            <dt>teaching hours: 4 hrs</dt>
                            <dd><p>Two-Phase Locking Technique; Timestamp Ordering; Multiversion Concurrency Control;</p><p>Validation (Optimistic) Techniques and Snapshot Isolation Concurrency Control</p><div><br></div></dd>

                            <dt>
                                10.
                                Database Recovery Techniques
                            </dt>
                            <dt>teaching hours: 3 hrs</dt>
                            <dd><p>Recovery Concepts; NO-UNDO/REDO Recovery Based on Deferred Update; Recovery</p><p>Technique Based on Immediate Update; Shadow Paging; Database Backup and Recovery from</p><p>Catastrophic Failures</p><div><br></div></dd>

                        </dl>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
            <!-- ./col -->

        </div>

        ");
            WriteLiteral(@"<div class=""row"">
            <div class=""col"">
                <div class=""card"">
                    <div class=""card-header"">
                        <h3 class=""card-title"">
                            <i class=""fas fa-desktop""></i>
                            <i class=""fas fa-flask""></i>
                            Lab and Practical works
                        </h3>
                        <div class=""card-tools"">
                            <button type=""button"" class=""btn btn-tool"" data-card-widget=""collapse"">
                                <i class=""fas fa-minus""></i>
                            </button>
                            <button type=""button"" class=""btn btn-tool"" data-card-widget=""maximize"">
                                <i class=""fas fa-expand""></i>
                            </button>
                        </div>
                    </div>
                    <!-- /.card-header -->
                    <div class=""card-body"">
                        <p><b>Labora");
            WriteLiteral(@"tory Works:</b></p><p>The laboratory work includes writing database programs to create and query databases using</p><p>basic and advanced features of structured query language (SQL) like</p><ul><li>Data definition and data Types</li><li>Specifying constraints (primary key, foreign key, referential integrity etc.)</li><li>Basic and complex retrieval queries</li><li>Aggregate functions</li><li>INSERT, DELETE, and UPDATE Statements</li><li>Using join and views</li></ul><div><br></div>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
            <!-- ./col -->

        </div>



    </div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
