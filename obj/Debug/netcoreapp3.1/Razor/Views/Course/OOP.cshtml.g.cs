#pragma checksum "C:\Users\admin\Desktop\Easy CSIT\Views\Course\OOP.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4abaa6d3525cb976fcf858e5d323a75952807e10"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Course_OOP), @"mvc.1.0.view", @"/Views/Course/OOP.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\admin\Desktop\Easy CSIT\Views\_ViewImports.cshtml"
using EasyCSIT;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\admin\Desktop\Easy CSIT\Views\_ViewImports.cshtml"
using EasyCSIT.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4abaa6d3525cb976fcf858e5d323a75952807e10", @"/Views/Course/OOP.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c841dc2f78dc3024c0f2f0360efb9bebdc1dbcee", @"/Views/_ViewImports.cshtml")]
    public class Views_Course_OOP : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<div class=""Teaching Hours"">

    <p>This page contains Syllabus of Object Oriented Programming of CSIT. </p>




    <div class=""card col-xl-6 col-lg-6 col-md-6 col-sm-12"">


        <div class=""card-body p-0"">
            <table class=""table table-sm"">

                <tbody>
                    <tr>
                        <td>Title</td>

                        <td>
                            Object Oriented Programming
                        </td>
                    </tr>
                    <tr>
                        <td>Course code</td>

                        <td>CSC161</td>
                    </tr>
                    <tr>
                        <td>Nature of course</td>

                        <td>Theory + Lab</td>
                    </tr>
                    <tr>
                        <td>Semester</td>

                        <td>Second-Semester</td>
                    </tr>
                    <tr>
                        <td>Full marks</td>

 ");
            WriteLiteral(@"                       <td>60 + 20 + 20</td>
                    </tr>
                    <tr>
                        <td>Pass marks</td>

                        <td>24 + 8 + 8</td>
                    </tr>
                    <tr>
                        <td>Credit Hrs</td>

                        <td>3</td>
                    </tr>
                    <tr>
                        <td>Elective/Compulsary</td>

                        <td>Compulsary</td>

                    </tr>

                </tbody>
            </table>
        </div>

    </div>



    <div class=""row"">
        <div class=""col"">
            <div class=""card"">
                <div class=""card-header"">
                    <h3 class=""card-title"">
                        <i class=""fa fa-book""></i>
                        Course Description
                    </h3>

                </div>
                <!-- /.card-header -->
                <div class=""card-body"">
                    <p><b>Co");
            WriteLiteral(@"urse Description: </b>The course covers the basic concepts of object oriented programming using C++ programming language.</p><p><br></p><p><b>Course Objectives:</b> The main objective of this course is to understand object oriented programming and advanced C++ concepts such as composition of objects, operator overloads, inheritance and polymorphism, file I/O, exception handling and templates.</p><div><br></div>
                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->
        </div>
        <!-- ./col -->

    </div>

    <div class=""row"">
        <div class=""col"">
            <div class=""card"">
                <div class=""card-header"">
                    <h3 class=""card-title"">
                        <i class=""fa fa-file""></i>
                        Units and Unit Content
                    </h3>

                </div>
                <!-- /.card-header -->
                <div class=""card-body"">
                    <dl>

         ");
            WriteLiteral(@"               <dt>
                            1.
                            Introduction to Object Oriented Programming
                        </dt>
                        <dt>Teaching Hours: 3 hrs</dt>
                        <dd><p>Overview of structured programming approach, Object oriented programming approach, Characteristics of object oriented languages</p><div><br></div></dd>

                        <dt>
                            2.
                            Basics of C++ programming
                        </dt>
                        <dt>Teaching Hours: 5 hrs</dt>
                        <dd><p>C++ Program Structure, Character Set and Tokens, Data Type, Type Conversion, Preprocessor Directives, Namespace, Input/Output Streams and Manipulators, Dynamic Memory Allocation with new and delete, Control Statements.</p><p>Functions: Function Overloading, Inline Functions, Default Argument, Pass by Reference, Return by Reference, Scope and Storage Class.</p><p>Pointers: Pointer variabl");
            WriteLiteral(@"es declaration &amp; initialization, Operators in pointers, Pointers and >Arrays, Pointer and Function.</p><div><br></div></dd>

                        <dt>
                            3.
                            Classes &amp; Objects
                        </dt>
                        <dt>Teaching Hours: 8 hrs</dt>
                        <dd><p>A Simple Class and Object, Accessing members of class, Initialization of class objects: (Constructor, Destructor), Default Constructor, Parameterized Constructor, Copy Constructor,</p><p>The Default Copy Constructor, Objects as Function Arguments, Returning Objects from Functions, Structures and Classes, Memory allocation for Objects, Static members, Member functions defined outside the class.</p><div><br></div></dd>

                        <dt>
                            4.
                            Operator Overloading
                        </dt>
                        <dt>Teaching Hours: 7 hrs</dt>
                        <dd><p>Fundamen");
            WriteLiteral(@"tal of operator overloading, Restriction on operator overloading, Operator functions as a class members, Overloading unary and binary operator, Data Conversion (basic to basic, basic to user-defined, user-defined to basic, user-defined to user-defined)</p><div><br></div></dd>

                        <dt>
                            5.
                            Inheritance
                        </dt>
                        <dt>Teaching Hours: 7 hrs</dt>
                        <dd><p>Introduction to inheritance, Derived Class and Base Class, Access Specifiers (private, protected, nd public), Types of inheritance, Public and Private Inheritance, Constructor and Destructor in derived classes, Aggregation</p><div><br></div></dd>

                        <dt>
                            6.
                            Virtual Function, Polymorphism, and miscellaneous
                        </dt>
                        <dt>Teaching Hours: 5 hrs</dt>
                        <dd><p>Concept of Vir");
            WriteLiteral(@"tual functions, Late Binding, Abstract class and pure virtual functions, Virtual Destructors, Virtual base class, Friend function and Static function, Assignment and copy initialization, Copy constructor, This pointer, Concrete classes, Polymorphism and its roles.</p><div><br></div></dd>

                        <dt>
                            7.
                            Function Templates and Exception Handling
                        </dt>
                        <dt>Teaching Hours: 4 hrs</dt>
                        <dd><p>Function templates, Function templates with multiple arguments, Class templates, templates and inheritance, Exceptional Handling (Try, throw and catch), Use of exceptional handling.</p><div><br></div></dd>

                        <dt>
                            8.
                            File handling
                        </dt>
                        <dt>Teaching Hours: 6 hrs</dt>
                        <dd><p>Stream Class Hierarchy for Console Input /Output,");
            WriteLiteral(@" Unformatted Input /Output, Formatted Input /Output with ios Member functions, Formatting with Manipulators, Stream Operator >Overloading, File Input/output with Streams, Opening and Closing files, Read/Write from File, File Access Pointers and their Manipulators, Sequential and Random Access to File, Testing Errors during File Operations</p><div><br></div></dd>

                    </dl>
                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->
        </div>
        <!-- ./col -->

    </div>

    <div class=""row"">
        <div class=""col"">
            <div class=""card"">
                <div class=""card-header"">
                    <h3 class=""card-title"">
                        <i class=""fa fa-desktop""></i>
                        <i class=""fa fa-flask""></i>
                        Lab and Practical works
                    </h3>

                </div>
                <!-- /.card-header -->
                <div class=""card-body"">
 ");
            WriteLiteral(@"                   <p>This course requires a lot of programming practices. Each topic must be followed by a practical session. Practical sessions for each unit should be conducted and should include writing the programs in C++. The instructors have to prepare lab sheets for individual units covering the each concepts of the units as per the requirement. The sample lab sessions can be as following descriptions;</p><p><b>For Unit 2:</b></p><p>-</p><p>Write programs for illustrating the concepts of</p><ul><li>&nbsp;input/output streams and manipulators,</li><li>&nbsp;dynamic memory operators with new and delete operators.</li><li>&nbsp;function overloading, inline functions, default arguments, pass by reference, return</li></ul><p>by reference</p><p><b>For Unit 3:</b></p><p>-</p><p>Write programs for illustrating the concepts of</p><ul><li>&nbsp;class and object</li><li>&nbsp;constructor (default, parameterized, copy)</li><li>&nbsp;destructor</li><li>&nbsp;objects as function arguments</li><li>&nbsp;returning ob");
            WriteLiteral(@"jects from functions</li></ul><p><b>For Unit 4:</b></p><p>-</p><p>Write programs for illustrating the concepts of</p><ul><li>&nbsp;unary operator overloading (prefix and postfix)</li><li>&nbsp;binary operator overloading (Arithmetic , comparison and assignment)</li><li>&nbsp;data conversion (basic to basic, basic to user-defined, user-defined to basic, user-</li><li>defined to user-defined)</li></ul><p><b>For Unit 5:</b></p><p>-</p><p>Write programs for illustrating the concepts of</p><ul><li>&nbsp;base class and derived class</li><li>&nbsp;protected access specifier</li><li>&nbsp;overriding member function</li><li>&nbsp;public and private inheritance</li><li>&nbsp;constructor in derived class</li></ul><p><b>For Unit 6:</b></p><p>-</p><p>Write programs for illustrating the concepts of</p><ul><li>abstract class and pure virtual function</li><li>friend function and friend class</li><li>static function</li><li>this pointer</li></ul><p><b>For Unit 7:</b></p><p>-</p><p>Write programs for illustrating the concepts ");
            WriteLiteral(@"of</p><ul><li>&nbsp;Function templates and class templates</li><li>&nbsp;Templates and Inheritance</li><li>&nbsp;Exceptional handling using try, throw and catch</li><li>&nbsp;Multiple exceptions , Exceptions with arguments</li></ul><p><b>For Unit 8:</b></p><p>-</p><p>Write programs for illustrating the concepts of</p><ul><li>&nbsp;ifstream, ofstream and fstream</li><li>&nbsp;Opening and Closing files using open () and close () member functions</li><li>&nbsp;Read/Write from File using put( ), and get( ),</li><li>read ( ) and write( ) member</li><li>functions</li><li>&nbsp;File Access Pointers and their Manipulators using seekg( ), seekp( ), tellg( ), tellp( ),</li><li>offset, ios::beg, ios::cur, ios::end</li><li>&nbsp;Testing Errors during File Operations using eof( ), fail( ), bad( ), good( )</li></ul><div><br></div>
                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->
        </div>
        <!-- ./col -->

    </div>



</div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
