#pragma checksum "C:\Users\admin\Desktop\Easy CSIT\Views\Course\DAA.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e69517fce4c481a9430ea39ea19dabbae9ec454a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Course_DAA), @"mvc.1.0.view", @"/Views/Course/DAA.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\admin\Desktop\Easy CSIT\Views\_ViewImports.cshtml"
using EasyCSIT;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\admin\Desktop\Easy CSIT\Views\_ViewImports.cshtml"
using EasyCSIT.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e69517fce4c481a9430ea39ea19dabbae9ec454a", @"/Views/Course/DAA.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c841dc2f78dc3024c0f2f0360efb9bebdc1dbcee", @"/Views/_ViewImports.cshtml")]
    public class Views_Course_DAA : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<div class=""terms"">
 

        <p>This page contains Syllabus of Design and Analysis of Algorithms of CSIT. </p>

        <div class=""row no-gutters"">


           


        </div>


        <div class=""card col-xl-6 col-lg-6 col-md-6 col-sm-12"">


            <div class=""card-body p-0"">
                <table class=""table table-sm"">

                    <tbody>
                        <tr>
                            <td>Title</td>

                            <td>
                                Design and Analysis of Algorithms
                            </td>
                        </tr>
                        <tr>
                            <td>Course code</td>

                            <td>CSC314</td>
                        </tr>
                        <tr>
                            <td>Nature of course</td>

                            <td>Theory + Lab</td>
                        </tr>
                        <tr>
                            <td>Semes");
            WriteLiteral(@"ter</td>

                            <td>fifth-semester</td>
                        </tr>
                        <tr>
                            <td>Full marks</td>

                            <td>60 + 20 + 20</td>
                        </tr>
                        <tr>
                            <td>Pass marks</td>

                            <td>24 + 8 + 8</td>
                        </tr>
                        <tr>
                            <td>Credit Hrs</td>

                            <td>3</td>
                        </tr>
                        <tr>
                            <td>Elective/Compulsary</td>

                            <td>Compulsary</td>

                        </tr>

                    </tbody>
                </table>
            </div>

        </div>



        <div class=""row"">
            <div class=""col"">
                <div class=""card"">
                    <div class=""card-header"">
                        <h3 class=""ca");
            WriteLiteral(@"rd-title"">
                            <i class=""fas fa-book""></i>
                            Course Description
                        </h3>
                        <div class=""card-tools"">
                            <button type=""button"" class=""btn btn-tool"" data-card-widget=""collapse"">
                                <i class=""fas fa-minus""></i>
                            </button>
                            <button type=""button"" class=""btn btn-tool"" data-card-widget=""maximize"">
                                <i class=""fas fa-expand""></i>
                            </button>
                        </div>
                    </div>
                    <!-- /.card-header -->
                    <div class=""card-body"">
                        <p>
                            <b>Course Description: </b>This course introduces basic elements of the design and analysis of
                            computer algorithms. Topics include asymptotic notations and analysis, divide and conquer
");
            WriteLiteral(@"                            strategy, greedy methods, dynamic programming, basic graph algorithms, NP-completeness,
                            and approximation algorithms. For each topic, beside in-depth coverage, one or more
                            representative problems and their algorithms shall be discussed.
                            Course Objectives:&nbsp;<br>
                        </p><ul><li>&nbsp; &nbsp;Analyze the asymptotic performance of algorithms.</li><li>&nbsp; &nbsp;Demonstrate a familiarity with major algorithm design techniques&nbsp;</li><li>&nbsp; &nbsp;Apply important algorithmic design paradigms and methods of analysis.&nbsp;</li><li>&nbsp; &nbsp;Solve simple to moderately difficult algorithmic problems arising in applications. </li><li>&nbsp; &nbsp;Able to demonstrate the hardness of simple NP-complete problems</li></ul>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
      ");
            WriteLiteral(@"      <!-- ./col -->

        </div>

        <div class=""row"">
            <div class=""col"">
                <div class=""card"">
                    <div class=""card-header"">
                        <h3 class=""card-title"">
                            <i class=""fas fa-file""></i>
                            Units and Unit Content
                        </h3>
                        <div class=""card-tools"">
                            <button type=""button"" class=""btn btn-tool"" data-card-widget=""collapse"">
                                <i class=""fas fa-minus""></i>
                            </button>
                            <button type=""button"" class=""btn btn-tool"" data-card-widget=""maximize"">
                                <i class=""fas fa-expand""></i>
                            </button>
                        </div>
                    </div>
                    <!-- /.card-header -->
                    <div class=""card-body"">
                        <dl>

                ");
            WriteLiteral(@"            <dt>
                                1.
                                Foundation of Algorithm Analysis
                            </dt>
                            <dt>teaching hours: 4 hrs</dt>
                            <dd><p>1.1. Algorithm and its properties, RAM model, Time and Space Complexity, detailed analysis</p><p>of algorithms (Like factorial algorithm), Concept of Aggregate Analysis</p><p>1.2. Asymptotic Notations: Big-O, Big-Ω and Big-Ө Notations their Geometrical Interpretation</p><p>and Examples.</p><p>1.3. Recurrences: Recursive Algorithms and Recurrence Relations, Solving Recurrences</p><p>(Recursion Tree Method, Substitution Method, Application of Masters Theorem)</p><div><br></div></dd>

                            <dt>
                                2.
                                Iterative Algorithms
                            </dt>
                            <dt>teaching hours: 4 hrs</dt>
                            <dd><p>2.1. Basic Algorithms: Algorith");
            WriteLiteral(@"m for GCD, Fibonacci Number and analysis of their time and</p><p>space complexity</p><p>2.2. Searching Algorithms: Sequential Search and its analysis</p><p>2.3. Sorting Algorithms: Bubble, Selection, and Insertion Sort and their Analysis</p><div><br></div></dd>

                            <dt>
                                3.
                                Divide and Conquer Algorithms
                            </dt>
                            <dt>teaching hours: 8 hrs</dt>
                            <dd><p>3.1. Searching Algorithms: Binary Search, Min-Max Finding and their Analysis</p><p>3.2. Sorting Algorithms: Merge Sort and Analysis, Quick Sort and Analysis (Best Case, Worst</p><p>Case and Average Case), Heap Sort (Heapify, Build Heap and Heap Sort Algorithms and</p><p>their Analysis), Randomized Quick sort and its Analysis</p><p>3.3. Order Statistics: Selection in Expected Linear Time, Selection in Worst Case Linear Time</p><p>and their Analysis.</p><div><br></div></dd>

                ");
            WriteLiteral(@"            <dt>
                                4.
                                Greedy Algorithms
                            </dt>
                            <dt>teaching hours: 6 hrs</dt>
                            <dd><p>4.1. Optimization Problems and Optimal Solution, Introduction of Greedy Algorithms,</p><p>Elements of Greedy Strategy.</p><p>4.2. Greedy Algorithms: Fractional Knapsack, Job sequencing with Deadlines, Kruskal’s</p><p>Algorithm, Prims Algorithm, Dijkstra’s Algorithm and their Analysis</p><p>4.3. Huffman Coding: Purpose of Huffman Coding, Prefix Codes, Huffman Coding</p><p>Algorithm and its Analysis</p><div><br></div></dd>

                            <dt>
                                5.
                                Dynamic Programming
                            </dt>
                            <dt>teaching hours: 8 hrs</dt>
                            <dd><p>5.1. Greedy Algorithms vs Dynamic Programming, Recursion vs Dynamic Programming,</p><p>Elements of DP Strate");
            WriteLiteral(@"gy</p><p>5.2. DP Algorithms: Matrix Chain Multiplication, String Editing, Zero-One Knapsack</p><p>Problem, Floyd Warshwall Algorithm, Travelling Salesman Problem and their</p><p>Analysis.</p><p>5.3. Memoization Strategy, Dynamic Programming vs Memoization</p><div><br></div></dd>

                            <dt>
                                6.
                                Backtracking
                            </dt>
                            <dt>teaching hours: 5 hrs</dt>
                            <dd><p>6.1. Concept of Backtracking, Recursion vs Backtracking</p><p>6.2. Backtracking Algorithms: Subset-sum Problem, Zero-one Knapsack Problem, N-queen</p><p>Problem and their Analysis.</p><div><br></div></dd>

                            <dt>
                                7.
                                Number Theoretic Algorithms
                            </dt>
                            <dt>teaching hours: 5 hrs</dt>
                            <dd><p>7.1. Number Theoretic Nota");
            WriteLiteral(@"tions, Euclid’s and Extended Euclid’s Algorithms and their</p><p>Analysis.</p><p>7.2. Solving Modular Linear Equations, Chinese Remainder Theorem, Primility Testing: Miller-</p><p>Rabin Randomized Primility Test and their Analysis</p><div><br></div></dd>

                            <dt>
                                8.
                                NP Completeness
                            </dt>
                            <dt>teaching hours: 5 hrs</dt>
                            <dd><p>8.1. Tractable and Intractable Problems, Concept of Polynomial Time and Super Polynomial</p><p>Time Complexity</p><p>8.2. Complexity Classes: P, NP, NP-Hard and NP-Complete</p><p>8.3. NP Complete Problems, NP Completeness and Reducibility, Cooks Theorem, Proofs of NP</p><p>Completeness (CNF-SAT, Vertex Cover and Subset Sum)</p><p>8.4. Approximation Algorithms: Concept, Vertex Cover Problem, Subset Sum Problem</p><div><br></div></dd>

                        </dl>
                    </div>
                  ");
            WriteLiteral(@"  <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
            <!-- ./col -->

        </div>

        <div class=""row"">
            <div class=""col"">
                <div class=""card"">
                    <div class=""card-header"">
                        <h3 class=""card-title"">
                            <i class=""fas fa-desktop""></i>
                            <i class=""fas fa-flask""></i>
                            Lab and Practical works
                        </h3>
                        <div class=""card-tools"">
                            <button type=""button"" class=""btn btn-tool"" data-card-widget=""collapse"">
                                <i class=""fas fa-minus""></i>
                            </button>
                            <button type=""button"" class=""btn btn-tool"" data-card-widget=""maximize"">
                                <i class=""fas fa-expand""></i>
                            </button>
                        </di");
            WriteLiteral(@"v>
                    </div>
                    <!-- /.card-header -->
                    <div class=""card-body"">
                        <p><span style=""font-weight: 700;"">Laboratory Works:</span></p><p>This course can be learnt in effective way only if we give focus is given in practical</p><p>aspects of algorithms and techniques discussed in class. Therefore student should be able</p><p>to implement the algorithms and analyze their behavior.</p><p>For the laboratory work, students should implement the following algorithms in C/ C++</p><p>and perform their analysis for time and space complexity.</p><p>1. Basic iterative algorithms GCD algorithm, Fibonacci Sequences, Sequential and Binary</p><p>Search.</p><p>2. Basic iterative sorting algorithms: Bubble Sort, selection Sort, Insertion Sort.</p><p>3. Binary Search with Divide and conquer approach.</p><p>4. Merge Sort, Heap sort, Quick Sort, Randomized Quick Sort.</p><p>5. Selection Problem with divide and Conquer approach</p><p>6. Fractional Knapsack P");
            WriteLiteral(@"roblem, Job sequencing with deadline, Kruskal’s algorithm, Prims</p><p>algorithm, Dijkstra’s Algorithm</p><p>7. Implement the dynamic programming algorithms.</p><p>8. Algorithms using Backtracking approach.</p><p>9. Implement approximation Algorithm.</p><div><br></div>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
            <!-- ./col -->

        </div>



    </div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
