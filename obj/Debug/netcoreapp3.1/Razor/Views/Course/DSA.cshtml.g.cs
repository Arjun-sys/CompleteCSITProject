#pragma checksum "C:\Users\admin\Desktop\Easy CSIT\Views\Course\DSA.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d466357e2654fdf295d0b26055abc9485ada9289"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Course_DSA), @"mvc.1.0.view", @"/Views/Course/DSA.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\admin\Desktop\Easy CSIT\Views\_ViewImports.cshtml"
using EasyCSIT;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\admin\Desktop\Easy CSIT\Views\_ViewImports.cshtml"
using EasyCSIT.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d466357e2654fdf295d0b26055abc9485ada9289", @"/Views/Course/DSA.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c841dc2f78dc3024c0f2f0360efb9bebdc1dbcee", @"/Views/_ViewImports.cshtml")]
    public class Views_Course_DSA : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<div class=""terms"">
   NN

        <p>This page contains Syllabus of Data Structures and Algorithms of CSIT. </p>

        <div class=""row no-gutters"">


          


        </div>


        <div class=""card col-xl-6 col-lg-6 col-md-6 col-sm-12"">


            <div class=""card-body p-0"">
                <table class=""table table-sm"">

                    <tbody>
                        <tr>
                            <td>Title</td>

                            <td>
                                Data Structures and Algorithms
                            </td>
                        </tr>
                        <tr>
                            <td>Course code</td>

                            <td>CSC206</td>
                        </tr>
                        <tr>
                            <td>Nature of course</td>

                            <td>Theory + Lab</td>
                        </tr>
                        <tr>
                            <td>Semester");
            WriteLiteral(@"</td>

                            <td>Third-Semester</td>
                        </tr>
                        <tr>
                            <td>Full marks</td>

                            <td>60 + 20 + 20</td>
                        </tr>
                        <tr>
                            <td>Pass marks</td>

                            <td>24 + 8 + 8</td>
                        </tr>
                        <tr>
                            <td>Credit Hrs</td>

                            <td>3</td>
                        </tr>
                        <tr>
                            <td>Elective/Compulsary</td>

                            <td>Compulsary</td>

                        </tr>

                    </tbody>
                </table>
            </div>

        </div>



        <div class=""row"">
            <div class=""col"">
                <div class=""card"">
                    <div class=""card-header"">
                        <h3 class=""card-");
            WriteLiteral(@"title"">
                            <i class=""fa fa-book""></i>
                            Course Description
                        </h3>
                      
                    </div>
                    <!-- /.card-header -->
                    <div class=""card-body"">
                        <p><b>Course Description:</b></p><p>This course includes the basic foundations in of data structures and algorithms. This course</p><p>covers concepts of various data structures like stack, queue, list, tree and graph. Additionally,</p><p>the course includes idea of sorting and searching.</p><p><b>Course Objectives:</b></p><ul><li>&nbsp;To introduce data abstraction and data representation in memory</li><li>&nbsp;To describe, design and use of elementary data structures such as stack, queue, linked list, tree and graph</li><li>&nbsp;To discuss decomposition of complex programming problems into manageable sub problems</li><li>&nbsp;To introduce algorithms and their complexity</li></ul><div><br></div>
     ");
            WriteLiteral(@"               </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
            <!-- ./col -->

        </div>

        <div class=""row"">
            <div class=""col"">
                <div class=""card"">
                    <div class=""card-header"">
                        <h3 class=""card-title"">
                            <i class=""fa fa-file""></i>
                            Units and Unit Content
                        </h3>
                       
                    </div>
                    <!-- /.card-header -->
                    <div class=""card-body"">
                        <dl>

                            <dt>
                                1.
                                Introduction to Data Structures &amp; Algorithms
                            </dt>
                            <dt>Teaching Hours: 4 hrs</dt>
                            <dd><p>1.1 Data types, Data structure and Abstract date ");
            WriteLiteral(@"type</p><p>1.2 Dynamic memory allocation in C</p><p>1.3 Introduction to Algorithms</p><p>1.4 Asymptotic notations and common functions</p><div><br></div></dd>

                            <dt>
                                2.
                                Stack
                            </dt>
                            <dt>Teaching Hours: 4 hrs</dt>
                            <dd><p>2.1 Basic Concept of Stack, Stack as an ADT, Stack Operations, Stack Applications</p><p>2.2 Conversion from infix to postfix/prefix expression, Evaluation of postfix/ prefix</p><p>expressions</p><div><br></div></dd>

                            <dt>
                                3.
                                Queue
                            </dt>
                            <dt>Teaching Hours: 4 hrs</dt>
                            <dd><p>3.1 Basic Concept of Queue, Queue as an ADT, Primitive Operations in Queue</p><p>3.2 Linear Queue, Circular Queue, Priority Queue, Queue Applications</p><div><br></d");
            WriteLiteral(@"iv></dd>

                            <dt>
                                4.
                                Recursion
                            </dt>
                            <dt>Teaching Hours: 3 hrs</dt>
                            <dd><p>4.1 Principle of Recursion, Comparison between Recursion and Iteration, Tail Recursion</p><p>4.2 Factorial, Fibonacci Sequence, GCD, Tower of Hanoi(TOH)</p><p>4.3 Applications and Efficiency of Recursion</p><div><br></div></dd>

                            <dt>
                                5.
                                Lists
                            </dt>
                            <dt>Teaching Hours: 8 hrs</dt>
                            <dd><p>5.1 Basic Concept, List and ADT, Array Implementation of Lists, Linked List</p><p>5.2 Types of Linked List: Singly Linked List, Doubly Linked List, Circular Linked List.</p><p>5.3 Basic operations in Linked List: Node Creation, Node Insertion and Deletion from</p><p>Beginning, End and Specified Pos");
            WriteLiteral(@"ition</p><p>5.4 Stack and Queue as Linked List</p><div><br></div></dd>

                            <dt>
                                6.
                                Sorting
                            </dt>
                            <dt>Teaching Hours: 8 hrs</dt>
                            <dd><p>6.1 Introduction and Types of sorting: Internal and External sort</p><p>6.2 Comparison Sorting Algorithms: Bubble, Selection and Insertion Sort, Shell Sort</p><p>6.3 Divide and Conquer Sorting: Merge, Quick and Heap Sort</p><p>6.4 Efficiency of Sorting Algorithms</p><div><br></div></dd>

                            <dt>
                                7.
                                Searching and Hashing
                            </dt>
                            <dt>Teaching Hours: 7 hrs</dt>
                            <dd><p>7.1 Introduction to Searching, Search Algorithms: Sequential Search, Binary Search</p><p>7.2 Efficiency of Search Algorithms</p><p>7.3 Hashing : Hash Function and ");
            WriteLiteral(@"Hash Tables, Collision Resolution Techniques</p><div><br></div></dd>

                            <dt>
                                8.
                                Trees and Graphs
                            </dt>
                            <dt>Teaching Hours: 8 hrs</dt>
                            <dd><p>8.1 Concept and Definitions, Basic Operations in Binary Tree, Tree Height, Level and Depth</p><p>8.2 Binary Search Tree, Insertion, Deletion, Traversals, Search in BST</p><p>8.3 AVL tree and Balancing algorithm, Applications of Trees</p><p>8.4 Definition and Representation of Graphs, Graph Traversal, Minimum Spanning Trees:</p><p>Kruskal and Prims Algorithm</p><p>8.5 Shortest Path Algorithms: Dijksrtra Algorithm</p><div><br></div></dd>

                        </dl>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
            <!-- ./col -->

        </div>

        <div class=""row"">
      ");
            WriteLiteral(@"      <div class=""col"">
                <div class=""card"">
                    <div class=""card-header"">
                        <h3 class=""card-title"">
                            <i class=""fa fa-desktop""></i>
                            <i class=""fa fa-flask""></i>
                            Lab and Practical works
                        </h3>
                      >
                    </div>
                    <!-- /.card-header -->
                    <div class=""card-body"">
                        <p><b>Laboratory Works:</b></p><p>After completing this course, students should have practical knowledge of data structures,</p><p>algorithms, and ADTs. The laboratory work includes.</p><ul><li>&nbsp;Writing programs with dynamic memory allocation and de-allocation.</li><li>&nbsp;Writing programs to implement stack operations.</li><li>&nbsp;Writing programs using stack to convert infix expression to postfix/prefix expression and to&nbsp; &nbsp;evaluate postfix/prefix expression.</li><li>&nbsp;Wri");
            WriteLiteral(@"ting programs to implement queue operations for linear, circular, and priority queue.</li><li>&nbsp;Writing recursive programs to implement factorial, Fibonacci sequence, GCD, and Towerof&nbsp; &nbsp;Hanoi algorithms.</li><li>&nbsp;Writing programs to implement list using array and linked list.</li><li>&nbsp;Writing programs for linked list implementation of stack and queue.</li><li>&nbsp;Writing programs to implement sorting, searching and hashing algorithms.</li><li>&nbsp;Writing programs to implement Binary Search Trees and AVL Tress.</li><li>&nbsp;Writing programs to implement searching, spanning tree and shortest path.</li></ul><div><br></div>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
            <!-- ./col -->

        </div>



    </div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
