#pragma checksum "C:\Users\admin\Desktop\Easy CSIT\Views\Course\OS.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1868bc5b84aeef9651f8af984a89eb685d469487"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Course_OS), @"mvc.1.0.view", @"/Views/Course/OS.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\admin\Desktop\Easy CSIT\Views\_ViewImports.cshtml"
using EasyCSIT;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\admin\Desktop\Easy CSIT\Views\_ViewImports.cshtml"
using EasyCSIT.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1868bc5b84aeef9651f8af984a89eb685d469487", @"/Views/Course/OS.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c841dc2f78dc3024c0f2f0360efb9bebdc1dbcee", @"/Views/_ViewImports.cshtml")]
    public class Views_Course_OS : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<div class=""terms"">
   

        <p>This page contains Syllabus of Operating Systems of CSIT. </p>

        <div class=""row no-gutters"">

        </div>


        <div class=""card col-xl-6 col-lg-6 col-md-6 col-sm-12"">


            <div class=""card-body p-0"">
                <table class=""table table-sm"">

                    <tbody>
                        <tr>
                            <td>Title</td>

                            <td>
                                Operating Systems
                            </td>
                        </tr>
                        <tr>
                            <td>Course code</td>

                            <td>CSC259</td>
                        </tr>
                        <tr>
                            <td>Nature of course</td>

                            <td>Theory + Lab</td>
                        </tr>
                        <tr>
                            <td>Semester</td>

                            <td>Fourt");
            WriteLiteral(@"h-Semester</td>
                        </tr>
                        <tr>
                            <td>Full marks</td>

                            <td>60 + 20 + 20</td>
                        </tr>
                        <tr>
                            <td>Pass marks</td>

                            <td>24 + 8 + 8</td>
                        </tr>
                        <tr>
                            <td>Credit Hrs</td>

                            <td>3</td>
                        </tr>
                        <tr>
                            <td>Elective/Compulsary</td>

                            <td>Compulsary</td>

                        </tr>

                    </tbody>
                </table>
            </div>

        </div>



        <div class=""row"">
            <div class=""col"">
                <div class=""card"">
                    <div class=""card-header"">
                        <h3 class=""card-title"">
                            <i class");
            WriteLiteral(@"=""fa fa-book""></i>
                            Course Description
                        </h3>
                        
                    </div>
                    <!-- /.card-header -->
                    <div class=""card-body"">
                        <p><b>Course Description: </b>This course includes the basic concepts of operating system components. It consists of process management, deadlocks and process synchronization, memory management techniques, File system implementation, and I/O device management principles. It also includes case study on Linux operating system.</p><p><b>Course Objectives</b></p><ol><li>&nbsp;Describe need and role of operating system.</li><li>&nbsp;Understand OS components such a scheduler, memory manager, file</li><li>system handlers and I/O device managers.</li><li>&nbsp;Analyze and criticize techniques used in OS components</li><li>&nbsp;Demonstrate and simulate algorithms used in OS components</li><li>&nbsp;Identify algorithms and techniques used in different comp");
            WriteLiteral(@"onents of Linux</li></ol>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
            <!-- ./col -->

        </div>

        <div class=""row"">
            <div class=""col"">
                <div class=""card"">
                    <div class=""card-header"">
                        <h3 class=""card-title"">
                            <i class=""fa fa-file""></i>
                            Units and Unit Content
                        </h3>
                       
                    </div>
                    <!-- /.card-header -->
                    <div class=""card-body"">
                        <dl>

                            <dt>
                                1.
                                Operating System Overview
                            </dt>
                            <dt>Teaching Hours: 4 hrs</dt>
                            <dd><p>1.1. Definition, Two views of operating ");
            WriteLiteral(@"system, Evolution of operating system, Types of OS.</p><p>1.2. System Call, Handling System Calls, System Programs, Operating System Structures,</p><p>The Shell, Open Source Operating Systems</p><div><br></div></dd>

                            <dt>
                                2.
                                Process Management
                            </dt>
                            <dt>Teaching Hours: 10 hrs</dt>
                            <dd><p>2.1. Process vs Program, Multiprogramming, Process Model, Process States, Process Control</p><p>Block.</p><p>2.2. Threads, Thread vs Process, User and Kernel Space Threads.</p><p>2.3. Inter Process Communication, Race Condition, Critical Section</p><p>2.4. Implementing Mutual Exclusion: Mutual Exclusion with Busy Waiting (Disabling</p><p>Interrupts, Lock Variables, Strict Alteration, Peterson’s Solution, Test and Set Lock),</p><p>Sleep and Wakeup, Semaphore, Monitors, Message Passing,</p><p>2.5. Classical IPC problems: Producer Consumer, Sleeping");
            WriteLiteral(@" Barber, Dining Philosopher</p><p>Problem</p><p>2.6. Process Scheduling: Goals, Batch System Scheduling (First-Come First-Served, Shortest</p><p>Job First, Shortest Remaining Time Next), Interactive System Scheduling (Round-Robin</p><p>Scheduling, Priority Scheduling, Multiple Queues), Overview of Real Time System</p><p>Scheduling</p><div><br></div></dd>

                            <dt>
                                3.
                                Process Deadlocks
                            </dt>
                            <dt>Teaching Hours: 6 hrs</dt>
                            <dd><p>3.1. Introduction, Deadlock Characterization, Preemptable and Non-preemptable Resources,</p><p>Resource – Allocation Graph, Conditions for Deadlock</p><div><div>3.2. Handling Deadlocks: Ostrich Algorithm, Deadlock prevention, Deadlock Avoidance,</div><div>Deadlock Detection (For Single and Multiple Resource Instances), Recovery From</div><div>Deadlock (Through Preemption and Rollback)</div></div><div><br></div");
            WriteLiteral(@"></dd>

                            <dt>
                                4.
                                Memory Management
                            </dt>
                            <dt>Teaching Hours: 8 hrs</dt>
                            <dd><p>4.1. Introduction, Monoprogramming vs. Multi-programming, Modelling Multiprogramming, Multiprogramming with fixed and variable partitions, Relocation and Protection.</p><p>4.2. Memory management (Bitmaps &amp; Linked-list), Memory Allocation Strategies</p><p>4.3. Virtual memory: Paging, Page Table, Page Table Structure, Handling Page Faults, TLB’s</p><p>4.4. Page Replacement Algorithms: FIFO, Second Chance, LRU, Optimal, LFU, Clock, WS- Clock, Concept of Locality of Reference, Belady’s Anomaly</p><p>4.5. Segmentation: Need of Segmentation, its Drawbacks, Segmentation with Paging(MULTICS)</p><div><br></div></dd>

                            <dt>
                                5.
                                File Management
                      ");
            WriteLiteral(@"      </dt>
                            <dt>Teaching Hours: 6 hrs</dt>
                            <dd><p>5.1. File Overview: File Naming, File Structure, File Types, File Access, File Attributes, File</p><p>Operations, Single Level, two Level and Hierarchical Directory Systems, File System</p><p>Layout.</p><p>5.2. Implementing Files: Contiguous allocation, Linked List Allocation, Linked List</p><p>Allocation using Table in Memory, Inodes.</p><p>5.3. Directory Operations, Path Names, Directory Implementation, Shared Files</p><p>5.4. Free Space Management: Bitmaps, Linked List</p><div><br></div></dd>

                            <dt>
                                6.
                                Device Management
                            </dt>
                            <dt>Teaching Hours: 6 hrs</dt>
                            <dd><p>6.1. Classification of IO devices, Controllers, Memory Mapped IO, DMA Operation,</p><p>Interrupts</p><p>6.2. Goals of IO Software, Handling IO(Programmed IO, Int");
            WriteLiteral(@"errupt Driven IO, IO using</p><p>DMA), IO Software Layers (Interrupt Handlers, Device Drivers)</p><p>6.3. Disk Structure, Disk Scheduling (FCFS, SSTF, SCAN, CSCAN, LOOK, CLOOK), Disk</p><p>Formatting (Cylinder Skew, Interleaving, Error handling), RAID</p><div><br></div></dd>

                            <dt>
                                7.
                                Linux Case Study
                            </dt>
                            <dt>Teaching Hours: 5 hrs</dt>
                            <dd><p>7.1 History, Kernel Modules, Process Management, Scheduling, Inter-process</p><p>Communication, Memory Management, File System Management Approaches, Device</p><p>Management Approaches.</p><div><br></div></dd>

                        </dl>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
            <!-- ./col -->

        </div>

        <div class=""row"">
            <div class=""col"">");
            WriteLiteral(@"
                <div class=""card"">
                    <div class=""card-header"">
                        <h3 class=""card-title"">
                            <i class=""fa fa-desktop""></i>
                            <i class=""fa fa-flask""></i>
                            Lab and Practical works
                        </h3>
                       
                    </div>
                    <!-- /.card-header -->
                    <div class=""card-body"">
                        <p><b>Laboratory Work</b></p><p>The laboratory work includes solving problems in operating system. The lab</p><p>work should include;</p><p>1 Demonstration of basic Linux Commands</p><p>2 Process creation and termination, thread creation and termination</p><p>3 Simulation of IPC techniques</p><p>4 Simulation process Scheduling algorithms</p><p>5 Simulation of deadlock avoidance and deadlock detection algorithms</p><p>6 Simulation of page replacement algorithms</p><p>7 Simulation of File allocation techniques</p><p>8 Si");
            WriteLiteral(@"mulate free space management techniques</p><p>9 Simulation of disk scheduling algorithms</p><div><br></div>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
            <!-- ./col -->

        </div>



    </div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
